#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef DAILYMOTIONPLAYERSDK_SWIFT_H
#define DAILYMOTIONPLAYERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DailymotionPlayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class DMPlayerView;
@class PlayerAdEndEvent;
@class NSString;
@class PlayerAdLoadedEvent;

/// Methods for follow the player video events related to livecyle of the Ad playing
SWIFT_PROTOCOL("_TtP20DailymotionPlayerSDK12DMAdDelegate_")
@protocol DMAdDelegate
@optional
/// Informs the delegate when a companion ad is received. Companion ads should be played in sync with the main ad (linear/non-linear) by listening to events <code>ad(_:didStart:_:)</code> and <code>ad(_:didEnd:)</code>
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidReceiveCompanions:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the duration property of the video advertisement becomes available or changes after a new video load
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param duration Current duration of the video
///
- (void)ad:(DMPlayerView * _Nonnull)player didChangeDuration:(double)duration;
/// Informs the delegate when the player completes playback of an ad
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param adEndEvent A <code>PlayerAdEndEvent</code> object that contains info about the ad that finished
///
- (void)ad:(DMPlayerView * _Nonnull)player didEnd:(PlayerAdEndEvent * _Nonnull)adEndEvent;
/// Informs the delegate when the player pauses an ad
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidPause:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the ad playback starts or continues after being in a paused state
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidPlay:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the player begins playback of an ad video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param type The ad type
///
/// \param position The position of the ad in the ad queue
///
- (void)ad:(DMPlayerView * _Nonnull)player didStart:(NSString * _Nonnull)type :(NSString * _Nonnull)position;
/// Informs the delegate when the playback position of an ad changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The ad time when the event was fired
///
- (void)ad:(DMPlayerView * _Nonnull)player didChangeTime:(double)time;
/// Informs the delegate when the first ad frame is displayed
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidImpression:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the player has loaded and buffered the creative’s media and assets either fully or to the extent that it is ready to play the media
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param adLoadedEvent A <code>PlayerAdLoadedEvent</code> object that contains info about the ad that finished
///
- (void)ad:(DMPlayerView * _Nonnull)player adDidLoaded:(PlayerAdLoadedEvent * _Nonnull)adLoadedEvent;
/// Informs the delegate when a user clicks on a video ad
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidClick:(DMPlayerView * _Nonnull)player;
@end

@class NSURL;
@class UIViewController;
@class PlayerVideoChangeEvent;
@class PlayerPlaybackPermission;
enum PresentationMode : NSInteger;

/// Methods for follow the player events related to lifecycle of the player
SWIFT_PROTOCOL("_TtP20DailymotionPlayerSDK16DMPlayerDelegate_")
@protocol DMPlayerDelegate
/// Informs the delegate that has to open a URL in a browser result as a user action
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param url The url to open
///
- (void)player:(DMPlayerView * _Nonnull)player openUrl:(NSURL * _Nonnull)url;
/// Asks the delegate for a UIViewController to present the player in Fullscreen
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param url The url to open
///
- (UIViewController * _Nonnull)playerWillPresentFullscreenViewController:(DMPlayerView * _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for a UIViewController to display an Ad dependent by a UIViewController
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (UIViewController * _Nonnull)playerWillPresentAdInParentViewController:(DMPlayerView * _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
@optional
/// Informs the delegate when the player has failed
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param error Error that describe the issue
///
- (void)player:(DMPlayerView * _Nonnull)player didFailWithError:(NSError * _Nonnull)error;
/// Informs the delegate when the availability to use our player controls changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param isVisible Whether the player controls are visible or not
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeControls:(BOOL)isVisible;
/// Informs the delegate when the player attempts to start the playback
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)playerDidStart:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the player playback of the content video, and eventual post-roll ad video is completed
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)playerDidEnd:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when a new video has been loaded in the player
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param videoChangedEvent A <code>PlayerVideoChangeEvent</code> object that contains info about the new loaded video
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeVideo:(PlayerVideoChangeEvent * _Nonnull)changedVideoEvent;
/// Informs the delegate when the volume level or mute state changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param volume Current player volume value
///
/// \param muted Whether the video is muted
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeVolume:(double)volume :(BOOL)muted;
/// Informs the delegate every time a video is ready to play, or started playing (depending on autoplay settings, and their resolution by the browser), or is unable to play (blocked, restricted, unavailable). Listen to this event if you want to defer doing network-heavy, to allow the optimal delivery of the first frames of the video to the use
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)playerDidCriticalPathReady:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when any playback request has failed or if the initial playback attempt has succeeded
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param playerPlaybackPermission A <code>PlayerPlaybackPermission</code> object that contains info about playback permission
///
- (void)player:(DMPlayerView * _Nonnull)player didReceivePlaybackPermission:(PlayerPlaybackPermission * _Nonnull)playbackPermission;
/// Informs the delegate when the player transitions to or from a Picture-in-Picture state, either native or the dailymotion version, or when the player enters or exits the fullscreen state
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)player:(DMPlayerView * _Nonnull)player didChangePresentationMode:(enum PresentationMode)presentationMode;
/// Informs the delegate  when the scale mode of the player changes after using  <code>DMPlayerView/setScaleMode(scaleMode:)</code>
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param scale The scale after change
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeScaleMode:(NSString * _Nonnull)scaleMode;
@end

@class NSCoder;

/// Main UIView of the player
/// Object that it’s used to command the player to do different actions, check the documentation for more details.
SWIFT_CLASS("_TtC20DailymotionPlayerSDK12DMPlayerView")
@interface DMPlayerView : UIView
/// This init is NOT implemented.
/// Using this will result in a fatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface DMPlayerView (SWIFT_EXTENSION(DailymotionPlayerSDK))
@end

/// The scale of the player
typedef SWIFT_ENUM(NSInteger, PresentationMode, open) {
/// Inline presentation mode
  PresentationModeInline = 0,
/// Picture in Picture presentation mode
  PresentationModePictureInPicture = 1,
/// Full Screen presentation mode
  PresentationModeFullscreen = 2,
};



/// Methods for follow the player video events related to livecyle of the video playing
SWIFT_PROTOCOL("_TtP20DailymotionPlayerSDK15DMVideoDelegate_")
@protocol DMVideoDelegate
@optional
/// Informs the delegate when the current subtitle changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param subtitle The subtitle code after change
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeSubtitles:(NSString * _Nonnull)subtitles;
/// Informs the delegate when the current subtitle codes list is ready for current video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param subtitleList Array of available subtitles codes
///
- (void)video:(DMPlayerView * _Nonnull)player didReceiveSubtitlesList:(NSArray<NSString *> * _Nonnull)subtitlesList;
/// Informs the delegate when the duration property of the video becomes available or changes after a new video load
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param duration Current duration of the video
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeDuration:(double)duration;
/// Informs the delegate when the player completes playback of the content video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidEnd:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the video playback has paused
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidPause:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the playback state of the content video is no longer paused, as a result of the play method or the autoplay attribute
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidPlay:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the content video starts playing, after the play or waiting event
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoIsPlaying:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the browser is fetching the media data
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time when the event was fired
///
- (void)video:(DMPlayerView * _Nonnull)player isInProgress:(double)progressTime;
/// Informs the delegate when the current qualities list is ready for current video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param qualities Array of available qualities
///
- (void)video:(DMPlayerView * _Nonnull)player didReceiveQualitiesList:(NSArray<NSString *> * _Nonnull)qualities;
/// Informs the delegate when the video quality changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param qualities The video quality after change
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeQuality:(NSString * _Nonnull)quality;
/// Informs the delegate when the video has completed a seeking operation
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time after seek
///
- (void)video:(DMPlayerView * _Nonnull)player didSeekEnd:(double)time;
/// Informs the delegate when the player starts to seek to another position in the video timeline
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time when the event was fired
///
- (void)video:(DMPlayerView * _Nonnull)player didSeekStart:(double)time;
/// Informs the delegate when the player begins playback of the content video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidStart:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the playback position changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time when the event was fired
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeTime:(double)time;
/// Informs the delegate when the player has to temporarily stop video playback for further buffering of content
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoIsBuffering:(DMPlayerView * _Nonnull)player;
@end

@class WKWebViewConfiguration;

/// You can observe bounds change with this view subclass via <code>ViewBoundsObserving</code> delegate.
SWIFT_CLASS("_TtC20DailymotionPlayerSDK11DMWKWebView")
@interface DMWKWebView : WKWebView
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Object that contains information about Ad End Event
/// \param type The of the ad
///
/// \param position The position of the ad
///
/// \param reason The reason of the ad end
///
/// \param error The error if there is one
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK16PlayerAdEndEvent")
@interface PlayerAdEndEvent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Object that contains information about Ad Loaded Event
/// \param position The position of the ad
///
/// \param skipOffset If the ad skiped offset
///
/// \param skippable If the ad is skippable
///
/// \param autoplay If the ad is autoplay
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK19PlayerAdLoadedEvent")
@interface PlayerAdLoadedEvent : NSObject
@end


/// Object that contains information about Playback Permission Event
/// \param status The status of the permission
///
/// \param reason The reason of the permission
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK24PlayerPlaybackPermission")
@interface PlayerPlaybackPermission : NSObject
@end


/// Object that contains information about Video Change Event
/// \param videoId The id of the video
///
/// \param title The title of the video
///
/// \param createdTime The time of the video creation
///
/// \param ownerId The owner Id
///
/// \param ownerUsername The username of the owner
///
/// \param ownerScreenname The screenname of the owner
///
/// \param duration The duration of the video
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK22PlayerVideoChangeEvent")
@interface PlayerVideoChangeEvent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef DAILYMOTIONPLAYERSDK_SWIFT_H
#define DAILYMOTIONPLAYERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DailymotionPlayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class DMPlayerView;
@class PlayerAdEndEvent;
@class NSString;
@class PlayerAdLoadedEvent;

/// Methods for follow the player video events related to livecyle of the Ad playing
SWIFT_PROTOCOL("_TtP20DailymotionPlayerSDK12DMAdDelegate_")
@protocol DMAdDelegate
@optional
/// Informs the delegate when a companion ad is received. Companion ads should be played in sync with the main ad (linear/non-linear) by listening to events <code>ad(_:didStart:_:)</code> and <code>ad(_:didEnd:)</code>
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidReceiveCompanions:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the duration property of the video advertisement becomes available or changes after a new video load
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param duration Current duration of the video
///
- (void)ad:(DMPlayerView * _Nonnull)player didChangeDuration:(double)duration;
/// Informs the delegate when the player completes playback of an ad
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param adEndEvent A <code>PlayerAdEndEvent</code> object that contains info about the ad that finished
///
- (void)ad:(DMPlayerView * _Nonnull)player didEnd:(PlayerAdEndEvent * _Nonnull)adEndEvent;
/// Informs the delegate when the player pauses an ad
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidPause:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the ad playback starts or continues after being in a paused state
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidPlay:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the player begins playback of an ad video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param type The ad type
///
/// \param position The position of the ad in the ad queue
///
- (void)ad:(DMPlayerView * _Nonnull)player didStart:(NSString * _Nonnull)type :(NSString * _Nonnull)position;
/// Informs the delegate when the playback position of an ad changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The ad time when the event was fired
///
- (void)ad:(DMPlayerView * _Nonnull)player didChangeTime:(double)time;
/// Informs the delegate when the first ad frame is displayed
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidImpression:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the player has loaded and buffered the creative’s media and assets either fully or to the extent that it is ready to play the media
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param adLoadedEvent A <code>PlayerAdLoadedEvent</code> object that contains info about the ad that finished
///
- (void)ad:(DMPlayerView * _Nonnull)player adDidLoaded:(PlayerAdLoadedEvent * _Nonnull)adLoadedEvent;
/// Informs the delegate when a user clicks on a video ad
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)adDidClick:(DMPlayerView * _Nonnull)player;
@end

@class NSURL;
@class UIViewController;
@class PlayerVideoChangeEvent;
@class PlayerPlaybackPermission;
enum PresentationMode : NSInteger;

/// Methods for follow the player events related to lifecycle of the player
SWIFT_PROTOCOL("_TtP20DailymotionPlayerSDK16DMPlayerDelegate_")
@protocol DMPlayerDelegate
/// Informs the delegate that has to open a URL in a browser result as a user action
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param url The url to open
///
- (void)player:(DMPlayerView * _Nonnull)player openUrl:(NSURL * _Nonnull)url;
/// Asks the delegate for a UIViewController to present the player in Fullscreen
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param url The url to open
///
- (UIViewController * _Nonnull)playerWillPresentFullscreenViewController:(DMPlayerView * _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for a UIViewController to display an Ad dependent by a UIViewController
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (UIViewController * _Nonnull)playerWillPresentAdInParentViewController:(DMPlayerView * _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
@optional
/// Informs the delegate when the player has failed
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param error Error that describe the issue
///
- (void)player:(DMPlayerView * _Nonnull)player didFailWithError:(NSError * _Nonnull)error;
/// Informs the delegate when the availability to use our player controls changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param isVisible Whether the player controls are visible or not
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeControls:(BOOL)isVisible;
/// Informs the delegate when the player attempts to start the playback
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)playerDidStart:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the player playback of the content video, and eventual post-roll ad video is completed
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)playerDidEnd:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when a new video has been loaded in the player
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param videoChangedEvent A <code>PlayerVideoChangeEvent</code> object that contains info about the new loaded video
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeVideo:(PlayerVideoChangeEvent * _Nonnull)changedVideoEvent;
/// Informs the delegate when the volume level or mute state changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param volume Current player volume value
///
/// \param muted Whether the video is muted
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeVolume:(double)volume :(BOOL)muted;
/// Informs the delegate every time a video is ready to play, or started playing (depending on autoplay settings, and their resolution by the browser), or is unable to play (blocked, restricted, unavailable). Listen to this event if you want to defer doing network-heavy, to allow the optimal delivery of the first frames of the video to the use
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)playerDidCriticalPathReady:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when any playback request has failed or if the initial playback attempt has succeeded
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param playerPlaybackPermission A <code>PlayerPlaybackPermission</code> object that contains info about playback permission
///
- (void)player:(DMPlayerView * _Nonnull)player didReceivePlaybackPermission:(PlayerPlaybackPermission * _Nonnull)playbackPermission;
/// Informs the delegate when the player transitions to or from a Picture-in-Picture state, either native or the dailymotion version, or when the player enters or exits the fullscreen state
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)player:(DMPlayerView * _Nonnull)player didChangePresentationMode:(enum PresentationMode)presentationMode;
/// Informs the delegate  when the scale mode of the player changes after using  <code>DMPlayerView/setScaleMode(scaleMode:)</code>
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param scale The scale after change
///
- (void)player:(DMPlayerView * _Nonnull)player didChangeScaleMode:(NSString * _Nonnull)scaleMode;
@end

@class NSCoder;

/// Main UIView of the player
/// Object that it’s used to command the player to do different actions, check the documentation for more details.
SWIFT_CLASS("_TtC20DailymotionPlayerSDK12DMPlayerView")
@interface DMPlayerView : UIView
/// This init is NOT implemented.
/// Using this will result in a fatalError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface DMPlayerView (SWIFT_EXTENSION(DailymotionPlayerSDK))
@end

/// The scale of the player
typedef SWIFT_ENUM(NSInteger, PresentationMode, open) {
/// Inline presentation mode
  PresentationModeInline = 0,
/// Picture in Picture presentation mode
  PresentationModePictureInPicture = 1,
/// Full Screen presentation mode
  PresentationModeFullscreen = 2,
};



/// Methods for follow the player video events related to livecyle of the video playing
SWIFT_PROTOCOL("_TtP20DailymotionPlayerSDK15DMVideoDelegate_")
@protocol DMVideoDelegate
@optional
/// Informs the delegate when the current subtitle changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param subtitle The subtitle code after change
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeSubtitles:(NSString * _Nonnull)subtitles;
/// Informs the delegate when the current subtitle codes list is ready for current video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param subtitleList Array of available subtitles codes
///
- (void)video:(DMPlayerView * _Nonnull)player didReceiveSubtitlesList:(NSArray<NSString *> * _Nonnull)subtitlesList;
/// Informs the delegate when the duration property of the video becomes available or changes after a new video load
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param duration Current duration of the video
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeDuration:(double)duration;
/// Informs the delegate when the player completes playback of the content video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidEnd:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the video playback has paused
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidPause:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the playback state of the content video is no longer paused, as a result of the play method or the autoplay attribute
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidPlay:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the content video starts playing, after the play or waiting event
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoIsPlaying:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the browser is fetching the media data
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time when the event was fired
///
- (void)video:(DMPlayerView * _Nonnull)player isInProgress:(double)progressTime;
/// Informs the delegate when the current qualities list is ready for current video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param qualities Array of available qualities
///
- (void)video:(DMPlayerView * _Nonnull)player didReceiveQualitiesList:(NSArray<NSString *> * _Nonnull)qualities;
/// Informs the delegate when the video quality changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param qualities The video quality after change
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeQuality:(NSString * _Nonnull)quality;
/// Informs the delegate when the video has completed a seeking operation
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time after seek
///
- (void)video:(DMPlayerView * _Nonnull)player didSeekEnd:(double)time;
/// Informs the delegate when the player starts to seek to another position in the video timeline
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time when the event was fired
///
- (void)video:(DMPlayerView * _Nonnull)player didSeekStart:(double)time;
/// Informs the delegate when the player begins playback of the content video
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoDidStart:(DMPlayerView * _Nonnull)player;
/// Informs the delegate when the playback position changes
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
/// \param time The video time when the event was fired
///
- (void)video:(DMPlayerView * _Nonnull)player didChangeTime:(double)time;
/// Informs the delegate when the player has to temporarily stop video playback for further buffering of content
/// \param player The <code>DMPlayerView</code> instance that called the delegate
///
- (void)videoIsBuffering:(DMPlayerView * _Nonnull)player;
@end

@class WKWebViewConfiguration;

/// You can observe bounds change with this view subclass via <code>ViewBoundsObserving</code> delegate.
SWIFT_CLASS("_TtC20DailymotionPlayerSDK11DMWKWebView")
@interface DMWKWebView : WKWebView
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Object that contains information about Ad End Event
/// \param type The of the ad
///
/// \param position The position of the ad
///
/// \param reason The reason of the ad end
///
/// \param error The error if there is one
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK16PlayerAdEndEvent")
@interface PlayerAdEndEvent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Object that contains information about Ad Loaded Event
/// \param position The position of the ad
///
/// \param skipOffset If the ad skiped offset
///
/// \param skippable If the ad is skippable
///
/// \param autoplay If the ad is autoplay
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK19PlayerAdLoadedEvent")
@interface PlayerAdLoadedEvent : NSObject
@end


/// Object that contains information about Playback Permission Event
/// \param status The status of the permission
///
/// \param reason The reason of the permission
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK24PlayerPlaybackPermission")
@interface PlayerPlaybackPermission : NSObject
@end


/// Object that contains information about Video Change Event
/// \param videoId The id of the video
///
/// \param title The title of the video
///
/// \param createdTime The time of the video creation
///
/// \param ownerId The owner Id
///
/// \param ownerUsername The username of the owner
///
/// \param ownerScreenname The screenname of the owner
///
/// \param duration The duration of the video
///
SWIFT_CLASS("_TtC20DailymotionPlayerSDK22PlayerVideoChangeEvent")
@interface PlayerVideoChangeEvent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
