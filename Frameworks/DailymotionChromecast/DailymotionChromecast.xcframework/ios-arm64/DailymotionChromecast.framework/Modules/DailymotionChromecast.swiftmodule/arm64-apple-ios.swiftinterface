// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.4.52 clang-1600.0.21.1.3)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DailymotionChromecast
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVKit
import Combine
import DeveloperToolsSupport
import Foundation
import GoogleCast
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum ChromecastError : Swift.Error {
  case underlyingCastError(error: any Swift.Error)
  case castSessionMissing
  case remoteMediaClientMissing
  case mediaStatusMissing
  case remoteMetadataMissing
}
public protocol DailymotionChromecastDelegate : AnyObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func castStarted(playable: DailymotionChromecast.Playable?)
  #else
  func castStarted(playable: DailymotionChromecast.Playable?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func castStopped(position: Swift.Double, playable: DailymotionChromecast.Playable?, suspended: Swift.Bool, error: DailymotionChromecast.ChromecastError?)
  #else
  func castStopped(position: Swift.Double, playable: DailymotionChromecast.Playable?, suspended: Swift.Bool, error: DailymotionChromecast.ChromecastError?)
  #endif
}
open class DMChromecast {
  public static let sdkVersion: Swift.String
  weak public var delegate: (any DailymotionChromecast.DailymotionChromecastDelegate)?
  public var isCasting: Swift.Bool
  public static var logLevels: DailymotionChromecast.LogLevel {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(playable: DailymotionChromecast.Playable, containerView: UIKit.UIView, delegate: (any DailymotionChromecast.DailymotionChromecastDelegate)? = nil)
  #else
  public init(playable: DailymotionChromecast.Playable, containerView: UIKit.UIView, delegate: (any DailymotionChromecast.DailymotionChromecastDelegate)? = nil)
  #endif
  public static func startChromecast()
  public func updatePlayable(playable: DailymotionChromecast.Playable)
  public func updatePlayablePosition(position: Swift.Double)
  public func setup()
  @objc deinit
}
public struct Playable : Swift.Codable, Swift.Equatable {
  public static func == (lhs: DailymotionChromecast.Playable, rhs: DailymotionChromecast.Playable) -> Swift.Bool
  public var chromecastUrl: Swift.String {
    get
  }
  public var isLive: Swift.Bool {
    get
  }
  public var isVideo: Swift.Bool {
    get
  }
  public var duration: Swift.Int {
    get
  }
  public var currentPosition: Swift.Double
  public var xid: Swift.String {
    get
  }
  public var thumbnailUrl: Foundation.URL {
    get
  }
  public var thumbnailSize: CoreFoundation.CGSize {
    get
  }
  public var titile: Swift.String {
    get
  }
  public var channelName: Swift.String {
    get
  }
  public init(chromecastUrl: Swift.String, isLive: Swift.Bool, isVideo: Swift.Bool, duration: Swift.Int, currentPosition: Swift.Double, xid: Swift.String, thumbnailUrl: Foundation.URL, thumbnailSize: CoreFoundation.CGSize, titile: Swift.String, channelName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LogLevel : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
  public typealias RawValue = Swift.UInt
  public var rawValue: DailymotionChromecast.LogLevel.RawValue
  public init(rawValue: DailymotionChromecast.LogLevel.RawValue)
  public typealias ArrayLiteralElement = DailymotionChromecast.LogLevel
  public typealias Element = DailymotionChromecast.LogLevel
}
